{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 841,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing Basic libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns \n",
    "\n",
    "pd.set_option('display.max_rows', 500)\n",
    "pd.set_option('display.max_columns',500)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 842,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reading data from csv file\n",
    "df_country = pd.read_csv('E:\\\\UPGRAD-study\\\\Assignment\\\\Clustering and PCA Assignment\\\\Country-data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 843,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>child_mort</th>\n",
       "      <th>exports</th>\n",
       "      <th>health</th>\n",
       "      <th>imports</th>\n",
       "      <th>income</th>\n",
       "      <th>inflation</th>\n",
       "      <th>life_expec</th>\n",
       "      <th>total_fer</th>\n",
       "      <th>gdpp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>90.2</td>\n",
       "      <td>10.0</td>\n",
       "      <td>7.58</td>\n",
       "      <td>44.9</td>\n",
       "      <td>1610</td>\n",
       "      <td>9.44</td>\n",
       "      <td>56.2</td>\n",
       "      <td>5.82</td>\n",
       "      <td>553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Albania</td>\n",
       "      <td>16.6</td>\n",
       "      <td>28.0</td>\n",
       "      <td>6.55</td>\n",
       "      <td>48.6</td>\n",
       "      <td>9930</td>\n",
       "      <td>4.49</td>\n",
       "      <td>76.3</td>\n",
       "      <td>1.65</td>\n",
       "      <td>4090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>27.3</td>\n",
       "      <td>38.4</td>\n",
       "      <td>4.17</td>\n",
       "      <td>31.4</td>\n",
       "      <td>12900</td>\n",
       "      <td>16.10</td>\n",
       "      <td>76.5</td>\n",
       "      <td>2.89</td>\n",
       "      <td>4460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Angola</td>\n",
       "      <td>119.0</td>\n",
       "      <td>62.3</td>\n",
       "      <td>2.85</td>\n",
       "      <td>42.9</td>\n",
       "      <td>5900</td>\n",
       "      <td>22.40</td>\n",
       "      <td>60.1</td>\n",
       "      <td>6.16</td>\n",
       "      <td>3530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>10.3</td>\n",
       "      <td>45.5</td>\n",
       "      <td>6.03</td>\n",
       "      <td>58.9</td>\n",
       "      <td>19100</td>\n",
       "      <td>1.44</td>\n",
       "      <td>76.8</td>\n",
       "      <td>2.13</td>\n",
       "      <td>12200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               country  child_mort  exports  health  imports  income  \\\n",
       "0          Afghanistan        90.2     10.0    7.58     44.9    1610   \n",
       "1              Albania        16.6     28.0    6.55     48.6    9930   \n",
       "2              Algeria        27.3     38.4    4.17     31.4   12900   \n",
       "3               Angola       119.0     62.3    2.85     42.9    5900   \n",
       "4  Antigua and Barbuda        10.3     45.5    6.03     58.9   19100   \n",
       "\n",
       "   inflation  life_expec  total_fer   gdpp  \n",
       "0       9.44        56.2       5.82    553  \n",
       "1       4.49        76.3       1.65   4090  \n",
       "2      16.10        76.5       2.89   4460  \n",
       "3      22.40        60.1       6.16   3530  \n",
       "4       1.44        76.8       2.13  12200  "
      ]
     },
     "execution_count": 843,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Having a look at the data\n",
    "df_country.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 844,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 167 entries, 0 to 166\n",
      "Data columns (total 10 columns):\n",
      "country       167 non-null object\n",
      "child_mort    167 non-null float64\n",
      "exports       167 non-null float64\n",
      "health        167 non-null float64\n",
      "imports       167 non-null float64\n",
      "income        167 non-null int64\n",
      "inflation     167 non-null float64\n",
      "life_expec    167 non-null float64\n",
      "total_fer     167 non-null float64\n",
      "gdpp          167 non-null int64\n",
      "dtypes: float64(7), int64(2), object(1)\n",
      "memory usage: 12.4+ KB\n"
     ]
    }
   ],
   "source": [
    "df_country.info() # checking info whether data has null value or checking dtypes of data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 845,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>child_mort</th>\n",
       "      <th>exports</th>\n",
       "      <th>health</th>\n",
       "      <th>imports</th>\n",
       "      <th>income</th>\n",
       "      <th>inflation</th>\n",
       "      <th>life_expec</th>\n",
       "      <th>total_fer</th>\n",
       "      <th>gdpp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>167.000000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>167.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>38.270060</td>\n",
       "      <td>41.108976</td>\n",
       "      <td>6.815689</td>\n",
       "      <td>46.890215</td>\n",
       "      <td>17144.688623</td>\n",
       "      <td>7.781832</td>\n",
       "      <td>70.555689</td>\n",
       "      <td>2.947964</td>\n",
       "      <td>12964.155689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>40.328931</td>\n",
       "      <td>27.412010</td>\n",
       "      <td>2.746837</td>\n",
       "      <td>24.209589</td>\n",
       "      <td>19278.067698</td>\n",
       "      <td>10.570704</td>\n",
       "      <td>8.893172</td>\n",
       "      <td>1.513848</td>\n",
       "      <td>18328.704809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.600000</td>\n",
       "      <td>0.109000</td>\n",
       "      <td>1.810000</td>\n",
       "      <td>0.065900</td>\n",
       "      <td>609.000000</td>\n",
       "      <td>-4.210000</td>\n",
       "      <td>32.100000</td>\n",
       "      <td>1.150000</td>\n",
       "      <td>231.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>8.250000</td>\n",
       "      <td>23.800000</td>\n",
       "      <td>4.920000</td>\n",
       "      <td>30.200000</td>\n",
       "      <td>3355.000000</td>\n",
       "      <td>1.810000</td>\n",
       "      <td>65.300000</td>\n",
       "      <td>1.795000</td>\n",
       "      <td>1330.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>19.300000</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>6.320000</td>\n",
       "      <td>43.300000</td>\n",
       "      <td>9960.000000</td>\n",
       "      <td>5.390000</td>\n",
       "      <td>73.100000</td>\n",
       "      <td>2.410000</td>\n",
       "      <td>4660.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>62.100000</td>\n",
       "      <td>51.350000</td>\n",
       "      <td>8.600000</td>\n",
       "      <td>58.750000</td>\n",
       "      <td>22800.000000</td>\n",
       "      <td>10.750000</td>\n",
       "      <td>76.800000</td>\n",
       "      <td>3.880000</td>\n",
       "      <td>14050.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>208.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>17.900000</td>\n",
       "      <td>174.000000</td>\n",
       "      <td>125000.000000</td>\n",
       "      <td>104.000000</td>\n",
       "      <td>82.800000</td>\n",
       "      <td>7.490000</td>\n",
       "      <td>105000.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       child_mort     exports      health     imports         income  \\\n",
       "count  167.000000  167.000000  167.000000  167.000000     167.000000   \n",
       "mean    38.270060   41.108976    6.815689   46.890215   17144.688623   \n",
       "std     40.328931   27.412010    2.746837   24.209589   19278.067698   \n",
       "min      2.600000    0.109000    1.810000    0.065900     609.000000   \n",
       "25%      8.250000   23.800000    4.920000   30.200000    3355.000000   \n",
       "50%     19.300000   35.000000    6.320000   43.300000    9960.000000   \n",
       "75%     62.100000   51.350000    8.600000   58.750000   22800.000000   \n",
       "max    208.000000  200.000000   17.900000  174.000000  125000.000000   \n",
       "\n",
       "        inflation  life_expec   total_fer           gdpp  \n",
       "count  167.000000  167.000000  167.000000     167.000000  \n",
       "mean     7.781832   70.555689    2.947964   12964.155689  \n",
       "std     10.570704    8.893172    1.513848   18328.704809  \n",
       "min     -4.210000   32.100000    1.150000     231.000000  \n",
       "25%      1.810000   65.300000    1.795000    1330.000000  \n",
       "50%      5.390000   73.100000    2.410000    4660.000000  \n",
       "75%     10.750000   76.800000    3.880000   14050.000000  \n",
       "max    104.000000   82.800000    7.490000  105000.000000  "
      ]
     },
     "execution_count": 845,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_country.describe() # checking statistical data of numeric columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 846,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(167, 10)"
      ]
     },
     "execution_count": 846,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_country.shape # Checking the number of rows and columns of the data frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 847,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "country       0\n",
       "child_mort    0\n",
       "exports       0\n",
       "health        0\n",
       "imports       0\n",
       "income        0\n",
       "inflation     0\n",
       "life_expec    0\n",
       "total_fer     0\n",
       "gdpp          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 847,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_country.isnull().sum() # checking null values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Converting % values to real number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 848,
   "metadata": {},
   "outputs": [],
   "source": [
    "# converting % columns i.e exports , imports and health into real numbers\n",
    "df_country['exports'] = (df_country['exports'] /df_country['gdpp'])*100\n",
    "df_country['imports'] = (df_country['imports'] /df_country['gdpp'])*100\n",
    "df_country['health'] = (df_country['health'] /df_country['gdpp'])*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 849,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>child_mort</th>\n",
       "      <th>exports</th>\n",
       "      <th>health</th>\n",
       "      <th>imports</th>\n",
       "      <th>income</th>\n",
       "      <th>inflation</th>\n",
       "      <th>life_expec</th>\n",
       "      <th>total_fer</th>\n",
       "      <th>gdpp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>90.2</td>\n",
       "      <td>1.808318</td>\n",
       "      <td>1.370705</td>\n",
       "      <td>8.119349</td>\n",
       "      <td>1610</td>\n",
       "      <td>9.44</td>\n",
       "      <td>56.2</td>\n",
       "      <td>5.82</td>\n",
       "      <td>553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Albania</td>\n",
       "      <td>16.6</td>\n",
       "      <td>0.684597</td>\n",
       "      <td>0.160147</td>\n",
       "      <td>1.188264</td>\n",
       "      <td>9930</td>\n",
       "      <td>4.49</td>\n",
       "      <td>76.3</td>\n",
       "      <td>1.65</td>\n",
       "      <td>4090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>27.3</td>\n",
       "      <td>0.860987</td>\n",
       "      <td>0.093498</td>\n",
       "      <td>0.704036</td>\n",
       "      <td>12900</td>\n",
       "      <td>16.10</td>\n",
       "      <td>76.5</td>\n",
       "      <td>2.89</td>\n",
       "      <td>4460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Angola</td>\n",
       "      <td>119.0</td>\n",
       "      <td>1.764873</td>\n",
       "      <td>0.080737</td>\n",
       "      <td>1.215297</td>\n",
       "      <td>5900</td>\n",
       "      <td>22.40</td>\n",
       "      <td>60.1</td>\n",
       "      <td>6.16</td>\n",
       "      <td>3530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>10.3</td>\n",
       "      <td>0.372951</td>\n",
       "      <td>0.049426</td>\n",
       "      <td>0.482787</td>\n",
       "      <td>19100</td>\n",
       "      <td>1.44</td>\n",
       "      <td>76.8</td>\n",
       "      <td>2.13</td>\n",
       "      <td>12200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               country  child_mort   exports    health   imports  income  \\\n",
       "0          Afghanistan        90.2  1.808318  1.370705  8.119349    1610   \n",
       "1              Albania        16.6  0.684597  0.160147  1.188264    9930   \n",
       "2              Algeria        27.3  0.860987  0.093498  0.704036   12900   \n",
       "3               Angola       119.0  1.764873  0.080737  1.215297    5900   \n",
       "4  Antigua and Barbuda        10.3  0.372951  0.049426  0.482787   19100   \n",
       "\n",
       "   inflation  life_expec  total_fer   gdpp  \n",
       "0       9.44        56.2       5.82    553  \n",
       "1       4.49        76.3       1.65   4090  \n",
       "2      16.10        76.5       2.89   4460  \n",
       "3      22.40        60.1       6.16   3530  \n",
       "4       1.44        76.8       2.13  12200  "
      ]
     },
     "execution_count": 849,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_country.head() # after modiying checking the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 850,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>child_mort</th>\n",
       "      <th>exports</th>\n",
       "      <th>health</th>\n",
       "      <th>imports</th>\n",
       "      <th>income</th>\n",
       "      <th>inflation</th>\n",
       "      <th>life_expec</th>\n",
       "      <th>total_fer</th>\n",
       "      <th>gdpp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>167.000000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>167.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>38.270060</td>\n",
       "      <td>1.441084</td>\n",
       "      <td>0.355765</td>\n",
       "      <td>2.395925</td>\n",
       "      <td>17144.688623</td>\n",
       "      <td>7.781832</td>\n",
       "      <td>70.555689</td>\n",
       "      <td>2.947964</td>\n",
       "      <td>12964.155689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>40.328931</td>\n",
       "      <td>1.829798</td>\n",
       "      <td>0.646116</td>\n",
       "      <td>3.738993</td>\n",
       "      <td>19278.067698</td>\n",
       "      <td>10.570704</td>\n",
       "      <td>8.893172</td>\n",
       "      <td>1.513848</td>\n",
       "      <td>18328.704809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.600000</td>\n",
       "      <td>0.011032</td>\n",
       "      <td>0.002575</td>\n",
       "      <td>0.006670</td>\n",
       "      <td>609.000000</td>\n",
       "      <td>-4.210000</td>\n",
       "      <td>32.100000</td>\n",
       "      <td>1.150000</td>\n",
       "      <td>231.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>8.250000</td>\n",
       "      <td>0.273842</td>\n",
       "      <td>0.041148</td>\n",
       "      <td>0.244265</td>\n",
       "      <td>3355.000000</td>\n",
       "      <td>1.810000</td>\n",
       "      <td>65.300000</td>\n",
       "      <td>1.795000</td>\n",
       "      <td>1330.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>19.300000</td>\n",
       "      <td>0.733918</td>\n",
       "      <td>0.119816</td>\n",
       "      <td>0.921127</td>\n",
       "      <td>9960.000000</td>\n",
       "      <td>5.390000</td>\n",
       "      <td>73.100000</td>\n",
       "      <td>2.410000</td>\n",
       "      <td>4660.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>62.100000</td>\n",
       "      <td>1.878930</td>\n",
       "      <td>0.396947</td>\n",
       "      <td>2.729061</td>\n",
       "      <td>22800.000000</td>\n",
       "      <td>10.750000</td>\n",
       "      <td>76.800000</td>\n",
       "      <td>3.880000</td>\n",
       "      <td>14050.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>208.000000</td>\n",
       "      <td>12.305389</td>\n",
       "      <td>5.021645</td>\n",
       "      <td>28.318043</td>\n",
       "      <td>125000.000000</td>\n",
       "      <td>104.000000</td>\n",
       "      <td>82.800000</td>\n",
       "      <td>7.490000</td>\n",
       "      <td>105000.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       child_mort     exports      health     imports         income  \\\n",
       "count  167.000000  167.000000  167.000000  167.000000     167.000000   \n",
       "mean    38.270060    1.441084    0.355765    2.395925   17144.688623   \n",
       "std     40.328931    1.829798    0.646116    3.738993   19278.067698   \n",
       "min      2.600000    0.011032    0.002575    0.006670     609.000000   \n",
       "25%      8.250000    0.273842    0.041148    0.244265    3355.000000   \n",
       "50%     19.300000    0.733918    0.119816    0.921127    9960.000000   \n",
       "75%     62.100000    1.878930    0.396947    2.729061   22800.000000   \n",
       "max    208.000000   12.305389    5.021645   28.318043  125000.000000   \n",
       "\n",
       "        inflation  life_expec   total_fer           gdpp  \n",
       "count  167.000000  167.000000  167.000000     167.000000  \n",
       "mean     7.781832   70.555689    2.947964   12964.155689  \n",
       "std     10.570704    8.893172    1.513848   18328.704809  \n",
       "min     -4.210000   32.100000    1.150000     231.000000  \n",
       "25%      1.810000   65.300000    1.795000    1330.000000  \n",
       "50%      5.390000   73.100000    2.410000    4660.000000  \n",
       "75%     10.750000   76.800000    3.880000   14050.000000  \n",
       "max    104.000000   82.800000    7.490000  105000.000000  "
      ]
     },
     "execution_count": 850,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_country.describe() # looking at the numerical columns statistics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Creating Box plot to check for outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 851,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15, 15))\n",
    "plt.subplot(3,3,1)\n",
    "plt.boxplot(x = 'child_mort',data = df_country)\n",
    "plt.xlabel('child_mort')\n",
    "plt.subplot(3,3,2)\n",
    "plt.boxplot(x = 'exports',data = df_country)\n",
    "plt.xlabel('exports')\n",
    "plt.subplot(3,3,3)\n",
    "plt.boxplot(x = 'health',data = df_country)\n",
    "plt.xlabel('health')\n",
    "plt.subplot(3,3,4)\n",
    "plt.boxplot(x = 'imports',data = df_country)\n",
    "plt.xlabel('imports')\n",
    "plt.subplot(3,3,5)\n",
    "plt.boxplot(x = 'income',data = df_country)\n",
    "plt.xlabel('income')\n",
    "plt.subplot(3,3,6)\n",
    "plt.boxplot(x = 'inflation',data = df_country)\n",
    "plt.xlabel('inflation')\n",
    "plt.subplot(3,3,7)\n",
    "plt.boxplot(x = 'life_expec',data = df_country)\n",
    "plt.xlabel('life_expec')\n",
    "plt.subplot(3,3,8)\n",
    "plt.boxplot(x = 'total_fer',data = df_country)\n",
    "plt.xlabel('totl_fer')\n",
    "plt.subplot(3,3,9)\n",
    "plt.boxplot(x = 'gdpp',data = df_country)\n",
    "plt.xlabel('gdpp')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 852,
   "metadata": {},
   "outputs": [],
   "source": [
    "country = df_country['country'] # separating the country column from main dataframe and preparing data for scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 853,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_country1 = df_country.drop(['country'],axis=1) # dropping country column from main dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scaling the Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 854,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler # importing libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 855,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler() # initialising instance of StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 856,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df_country1.copy() # making a new copy of main dataframe "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 857,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=scaler.fit_transform(X) # Perform fit_transform  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 858,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(167, 9)"
      ]
     },
     "execution_count": 858,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.shape # checking shape of the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Applying PCA  on the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 859,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 860,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca = PCA(random_state=10,svd_solver='randomized')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 861,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PCA(copy=True, iterated_power='auto', n_components=None, random_state=10,\n",
       "    svd_solver='randomized', tol=0.0, whiten=False)"
      ]
     },
     "execution_count": 861,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca.fit(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 862,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.38114769,  0.35492444,  0.33479187,  0.35821258, -0.3169913 ,\n",
       "         0.11761124, -0.38304932,  0.37001762, -0.3006618 ],\n",
       "       [ 0.02508328, -0.26064645, -0.40082685, -0.40399902, -0.39635424,\n",
       "         0.46518451, -0.09716571,  0.0048653 , -0.47391848],\n",
       "       [ 0.23534123, -0.03733846,  0.00448544, -0.06484034,  0.44903727,\n",
       "         0.69813634, -0.07420346,  0.27302209,  0.41221345],\n",
       "       [-0.44294963,  0.22027375,  0.31919404,  0.30287484, -0.10478709,\n",
       "         0.51501676,  0.40599677, -0.30505717, -0.16595557],\n",
       "       [ 0.0638946 , -0.78539137,  0.59997606,  0.04003459, -0.04432434,\n",
       "         0.00699488, -0.09482606, -0.06783123, -0.04355689],\n",
       "       [ 0.14122975,  0.08011802, -0.08472649,  0.12909899,  0.17972218,\n",
       "         0.09938973, -0.57595133, -0.75867506, -0.01743492],\n",
       "       [-0.37266438, -0.00736421,  0.03011282, -0.01414355,  0.6398483 ,\n",
       "        -0.06506395, -0.21959912,  0.24718005, -0.5805164 ],\n",
       "       [ 0.41909597,  0.29509336,  0.40022859, -0.60013764,  0.18223063,\n",
       "        -0.05088505,  0.28699969, -0.21371899, -0.23040931],\n",
       "       [ 0.51376927, -0.21397328, -0.31162113,  0.48362853,  0.23005755,\n",
       "        -0.01960882,  0.4496532 , -0.09219355, -0.3086319 ]])"
      ]
     },
     "execution_count": 862,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca.components_ # looking at PCA components"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 863,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.59073994, 0.14077604, 0.11244125, 0.06540865, 0.03636624,\n",
       "       0.02503328, 0.01122407, 0.00926244, 0.00874809])"
      ]
     },
     "execution_count": 863,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca.explained_variance_ratio_ # looking at the variance ratio "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting bar plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 864,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Explained_Variance_Ratio')"
      ]
     },
     "execution_count": 864,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(range(1,len(pca.explained_variance_ratio_)+1),pca.explained_variance_ratio_)\n",
    "plt.xlabel('No. of Components')\n",
    "plt.ylabel('Explained_Variance_Ratio')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 865,
   "metadata": {},
   "outputs": [],
   "source": [
    "cum_value = pca.explained_variance_ratio_.cumsum() # cumulative sum of the explained_variance_ratio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 866,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.59073994, 0.73151598, 0.84395723, 0.90936588, 0.94573212,\n",
       "       0.9707654 , 0.98198947, 0.99125191, 1.        ])"
      ]
     },
     "execution_count": 866,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cum_value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting Scree Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 867,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting Scree plot\n",
    "plt.plot(range(1,len(cum_value)+1),cum_value)\n",
    "plt.xlabel('No. of Components')\n",
    "plt.ylabel('Cumulative Sum')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Here in the above graph we can say that the 5 components is covering our maximum data i.e 94%"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating PCA using  5 components"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 868,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import IncrementalPCA\n",
    "pc2= IncrementalPCA(n_components=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 869,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_df = pc2.fit_transform(x) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 870,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-3.44414454,  0.3899039 ,  0.31750843, -0.50018244, -1.02667336],\n",
       "       [ 0.90837147, -0.51780302, -0.96354567,  0.42539555, -0.12745409],\n",
       "       [ 0.48399188, -1.03076312,  0.18081331,  0.59129493,  0.06119358],\n",
       "       [-2.31470706, -1.54423966,  1.6724809 , -1.31258907,  0.25715976],\n",
       "       [ 1.3768552 , -0.16615447, -0.69846222,  0.01291776, -0.07072721]])"
      ]
     },
     "execution_count": 870,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_df[:5,:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 871,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_df = np.transpose(new_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 872,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5, 167)"
      ]
     },
     "execution_count": 872,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 873,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a new dataframe with 5 principal components\n",
    "pca_final = pd.DataFrame({'PCA1': new_df[0],\n",
    "                          'PCA2':new_df[1],\n",
    "                          'PCA3':new_df[2],\n",
    "                          'PCA4':new_df[3],\n",
    "                          'PCA5':new_df[4]})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 874,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PCA1</th>\n",
       "      <th>PCA2</th>\n",
       "      <th>PCA3</th>\n",
       "      <th>PCA4</th>\n",
       "      <th>PCA5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-3.444145</td>\n",
       "      <td>0.389904</td>\n",
       "      <td>0.317508</td>\n",
       "      <td>-0.500182</td>\n",
       "      <td>-1.026673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.908371</td>\n",
       "      <td>-0.517803</td>\n",
       "      <td>-0.963546</td>\n",
       "      <td>0.425396</td>\n",
       "      <td>-0.127454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.483992</td>\n",
       "      <td>-1.030763</td>\n",
       "      <td>0.180813</td>\n",
       "      <td>0.591295</td>\n",
       "      <td>0.061194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-2.314707</td>\n",
       "      <td>-1.544240</td>\n",
       "      <td>1.672481</td>\n",
       "      <td>-1.312589</td>\n",
       "      <td>0.257160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.376855</td>\n",
       "      <td>-0.166154</td>\n",
       "      <td>-0.698462</td>\n",
       "      <td>0.012918</td>\n",
       "      <td>-0.070727</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PCA1      PCA2      PCA3      PCA4      PCA5\n",
       "0 -3.444145  0.389904  0.317508 -0.500182 -1.026673\n",
       "1  0.908371 -0.517803 -0.963546  0.425396 -0.127454\n",
       "2  0.483992 -1.030763  0.180813  0.591295  0.061194\n",
       "3 -2.314707 -1.544240  1.672481 -1.312589  0.257160\n",
       "4  1.376855 -0.166154 -0.698462  0.012918 -0.070727"
      ]
     },
     "execution_count": 874,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_final.head() # loooking at the head of the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 875,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca_final = pd.concat([pca_final,country],axis=1) #Concating new dataframe wih country column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 876,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PCA1</th>\n",
       "      <th>PCA2</th>\n",
       "      <th>PCA3</th>\n",
       "      <th>PCA4</th>\n",
       "      <th>PCA5</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-3.444145</td>\n",
       "      <td>0.389904</td>\n",
       "      <td>0.317508</td>\n",
       "      <td>-0.500182</td>\n",
       "      <td>-1.026673</td>\n",
       "      <td>Afghanistan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.908371</td>\n",
       "      <td>-0.517803</td>\n",
       "      <td>-0.963546</td>\n",
       "      <td>0.425396</td>\n",
       "      <td>-0.127454</td>\n",
       "      <td>Albania</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.483992</td>\n",
       "      <td>-1.030763</td>\n",
       "      <td>0.180813</td>\n",
       "      <td>0.591295</td>\n",
       "      <td>0.061194</td>\n",
       "      <td>Algeria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-2.314707</td>\n",
       "      <td>-1.544240</td>\n",
       "      <td>1.672481</td>\n",
       "      <td>-1.312589</td>\n",
       "      <td>0.257160</td>\n",
       "      <td>Angola</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.376855</td>\n",
       "      <td>-0.166154</td>\n",
       "      <td>-0.698462</td>\n",
       "      <td>0.012918</td>\n",
       "      <td>-0.070727</td>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PCA1      PCA2      PCA3      PCA4      PCA5              country\n",
       "0 -3.444145  0.389904  0.317508 -0.500182 -1.026673          Afghanistan\n",
       "1  0.908371 -0.517803 -0.963546  0.425396 -0.127454              Albania\n",
       "2  0.483992 -1.030763  0.180813  0.591295  0.061194              Algeria\n",
       "3 -2.314707 -1.544240  1.672481 -1.312589  0.257160               Angola\n",
       "4  1.376855 -0.166154 -0.698462  0.012918 -0.070727  Antigua and Barbuda"
      ]
     },
     "execution_count": 876,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_final.head() # looking at the head of the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Outlier Detection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 877,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting boxplot to look for identifier\n",
    "plt.figure(figsize=(15, 15))\n",
    "plt.subplot(3,3,1)\n",
    "plt.boxplot(x = 'PCA1',data = pca_final)\n",
    "plt.xlabel('PCA1')\n",
    "plt.subplot(3,3,2)\n",
    "plt.boxplot(x = 'PCA2',data = pca_final)\n",
    "plt.xlabel('PCA2')\n",
    "plt.subplot(3,3,3)\n",
    "plt.boxplot(x = 'PCA3',data = pca_final)\n",
    "plt.xlabel('PCA3')\n",
    "plt.subplot(3,3,4)\n",
    "plt.boxplot(x = 'PCA4',data = pca_final)\n",
    "plt.xlabel('PCA4')\n",
    "plt.subplot(3,3,5)\n",
    "plt.boxplot(x = 'PCA5',data = pca_final)\n",
    "plt.xlabel('PCA5')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 878,
   "metadata": {},
   "outputs": [],
   "source": [
    "bout = pca_final.copy(deep=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 879,
   "metadata": {},
   "outputs": [],
   "source": [
    "# outlier treatment for PCA1\n",
    "Q1 = pca_final.PCA1.quantile(0.05)\n",
    "Q3 = pca_final.PCA1.quantile(0.95)\n",
    "IQR = Q3 - Q1\n",
    "pca_final = pca_final[(pca_final.PCA1 >= Q1 - 1.5*IQR) & (pca_final.PCA1 <= Q3 + 1.5*IQR)]\n",
    "\n",
    "# outlier treatment for PCA2\n",
    "Q1 = pca_final.PCA2.quantile(0.05)\n",
    "Q3 = pca_final.PCA2.quantile(0.95)\n",
    "IQR = Q3 - Q1\n",
    "pca_final = pca_final[(pca_final.PCA2 >= Q1 - 1.5*IQR) & (pca_final.PCA2 <= Q3 + 1.5*IQR)]\n",
    "\n",
    "# outlier treatment for PCA3\n",
    "Q1 = pca_final.PCA3.quantile(0.05)\n",
    "Q3 = pca_final.PCA3.quantile(0.95)\n",
    "IQR = Q3 - Q1\n",
    "pca_final = pca_final[(pca_final.PCA3 >= Q1 - 1.5*IQR) & (pca_final.PCA3 <= Q3 + 1.5*IQR)]\n",
    "\n",
    "# outlier treatment for PCA4\n",
    "Q1 = pca_final.PCA4.quantile(0.05)\n",
    "Q3 = pca_final.PCA4.quantile(0.95)\n",
    "IQR = Q3 - Q1\n",
    "pca_final = pca_final[(pca_final.PCA4 >= Q1 - 1.5*IQR) & (pca_final.PCA4 <= Q3 + 1.5*IQR)]\n",
    "\n",
    "# outlier treatment for PCA5\n",
    "Q1 = pca_final.PCA5.quantile(0.05)\n",
    "Q3 = pca_final.PCA5.quantile(0.95)\n",
    "IQR = Q3 - Q1\n",
    "pca_final = pca_final[(pca_final.PCA5 >= Q1 - 1.5*IQR) & (pca_final.PCA5 <= Q3 + 1.5*IQR)]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 880,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(165, 6)"
      ]
     },
     "execution_count": 880,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_final.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 881,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculating the Hopkins statistic\n",
    "from sklearn.neighbors import NearestNeighbors\n",
    "from random import sample\n",
    "from numpy.random import uniform\n",
    "import numpy as np\n",
    "from math import isnan\n",
    " \n",
    "def hopkins(X):\n",
    "    d = X.shape[1]\n",
    "    #d = len(vars) # columns\n",
    "    n = len(X) # rows\n",
    "    m = int(0.1 * n) \n",
    "    nbrs = NearestNeighbors(n_neighbors=1).fit(X.values)\n",
    " \n",
    "    rand_X = sample(range(0, n, 1), m)\n",
    " \n",
    "    ujd = []\n",
    "    wjd = []\n",
    "    for j in range(0, m):\n",
    "        u_dist, _ = nbrs.kneighbors(uniform(np.amin(X,axis=0),np.amax(X,axis=0),d).reshape(1, -1), 2, return_distance=True)\n",
    "        ujd.append(u_dist[0][1])\n",
    "        w_dist, _ = nbrs.kneighbors(X.iloc[rand_X[j]].values.reshape(1, -1), 2, return_distance=True)\n",
    "        wjd.append(w_dist[0][1])\n",
    " \n",
    "    H = sum(ujd) / (sum(ujd) + sum(wjd))\n",
    "    if isnan(H):\n",
    "        print(ujd, wjd)\n",
    "        H = 0\n",
    " \n",
    "    return H"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 882,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8383699336164513"
      ]
     },
     "execution_count": 882,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hopkins(pca_final.drop('country',axis=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 883,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PCA1</th>\n",
       "      <th>PCA2</th>\n",
       "      <th>PCA3</th>\n",
       "      <th>PCA4</th>\n",
       "      <th>PCA5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-3.444145</td>\n",
       "      <td>0.389904</td>\n",
       "      <td>0.317508</td>\n",
       "      <td>-0.500182</td>\n",
       "      <td>-1.026673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.908371</td>\n",
       "      <td>-0.517803</td>\n",
       "      <td>-0.963546</td>\n",
       "      <td>0.425396</td>\n",
       "      <td>-0.127454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.483992</td>\n",
       "      <td>-1.030763</td>\n",
       "      <td>0.180813</td>\n",
       "      <td>0.591295</td>\n",
       "      <td>0.061194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-2.314707</td>\n",
       "      <td>-1.544240</td>\n",
       "      <td>1.672481</td>\n",
       "      <td>-1.312589</td>\n",
       "      <td>0.257160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.376855</td>\n",
       "      <td>-0.166154</td>\n",
       "      <td>-0.698462</td>\n",
       "      <td>0.012918</td>\n",
       "      <td>-0.070727</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PCA1      PCA2      PCA3      PCA4      PCA5\n",
       "0 -3.444145  0.389904  0.317508 -0.500182 -1.026673\n",
       "1  0.908371 -0.517803 -0.963546  0.425396 -0.127454\n",
       "2  0.483992 -1.030763  0.180813  0.591295  0.061194\n",
       "3 -2.314707 -1.544240  1.672481 -1.312589  0.257160\n",
       "4  1.376855 -0.166154 -0.698462  0.012918 -0.070727"
      ]
     },
     "execution_count": 883,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_final1 = pca_final.drop('country',axis=1)\n",
    "pca_final1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### K - Means Clustering "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Look at the silhouette score plot and choose the optimal number of cluster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 884,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import silhouette_score\n",
    "from sklearn.cluster import KMeans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 885,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2, 0.4771892022728847], [3, 0.4152984762023083], [4, 0.4144371793908356], [5, 0.3513049666223278], [6, 0.3276291515691092], [7, 0.34886692793591473], [8, 0.32319607858544847], [9, 0.3160460407193965]]\n"
     ]
    }
   ],
   "source": [
    "sse = []\n",
    "for i in range(2,10):\n",
    "    kmean = KMeans(n_clusters = i).fit(pca_final1)\n",
    "    sse.append([i,silhouette_score(pca_final1,kmean.labels_)])\n",
    "    \n",
    "print(sse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 886,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1ff6de30>]"
      ]
     },
     "execution_count": 886,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(pd.DataFrame(sse)[0],pd.DataFrame(sse)[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Look at the Elbow Curve plot and choose the optimal number of cluster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 887,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1248.5622869867348, 670.5358616379132, 456.61732563747273, 358.34591513787285, 301.4526671344621, 269.61537030080524, 243.54761956436369, 217.28677357011037, 197.14000241852838]\n"
     ]
    }
   ],
   "source": [
    "ssd = []\n",
    "for i in list(range(1,10)):\n",
    "    model_clus = KMeans(n_clusters=i,max_iter=50)\n",
    "    model_clus.fit(pca_final1)\n",
    "    ssd.append(model_clus.inertia_)\n",
    "\n",
    "print(ssd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 888,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1ffae370>]"
      ]
     },
     "execution_count": 888,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(ssd)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### KMeans with the K the we have choosed that is 3 cluster as looking at the above graph we can identify in elbow curve that cluster in 3 is good"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 889,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=50,\n",
       "       n_clusters=3, n_init=10, n_jobs=None, precompute_distances='auto',\n",
       "       random_state=24, tol=0.0001, verbose=0)"
      ]
     },
     "execution_count": 889,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Performing K-Means clustering with k = 3\n",
    "model_1 = KMeans(n_clusters=3,random_state=24,max_iter=50)\n",
    "model_1.fit(pca_final1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 890,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PCA1</th>\n",
       "      <th>PCA2</th>\n",
       "      <th>PCA3</th>\n",
       "      <th>PCA4</th>\n",
       "      <th>PCA5</th>\n",
       "      <th>country</th>\n",
       "      <th>Cluster_Id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-3.444145</td>\n",
       "      <td>0.389904</td>\n",
       "      <td>0.317508</td>\n",
       "      <td>-0.500182</td>\n",
       "      <td>-1.026673</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.908371</td>\n",
       "      <td>-0.517803</td>\n",
       "      <td>-0.963546</td>\n",
       "      <td>0.425396</td>\n",
       "      <td>-0.127454</td>\n",
       "      <td>Albania</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.483992</td>\n",
       "      <td>-1.030763</td>\n",
       "      <td>0.180813</td>\n",
       "      <td>0.591295</td>\n",
       "      <td>0.061194</td>\n",
       "      <td>Algeria</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-2.314707</td>\n",
       "      <td>-1.544240</td>\n",
       "      <td>1.672481</td>\n",
       "      <td>-1.312589</td>\n",
       "      <td>0.257160</td>\n",
       "      <td>Angola</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.376855</td>\n",
       "      <td>-0.166154</td>\n",
       "      <td>-0.698462</td>\n",
       "      <td>0.012918</td>\n",
       "      <td>-0.070727</td>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PCA1      PCA2      PCA3      PCA4      PCA5              country  \\\n",
       "0 -3.444145  0.389904  0.317508 -0.500182 -1.026673          Afghanistan   \n",
       "1  0.908371 -0.517803 -0.963546  0.425396 -0.127454              Albania   \n",
       "2  0.483992 -1.030763  0.180813  0.591295  0.061194              Algeria   \n",
       "3 -2.314707 -1.544240  1.672481 -1.312589  0.257160               Angola   \n",
       "4  1.376855 -0.166154 -0.698462  0.012918 -0.070727  Antigua and Barbuda   \n",
       "\n",
       "   Cluster_Id  \n",
       "0           0  \n",
       "1           2  \n",
       "2           2  \n",
       "3           0  \n",
       "4           2  "
      ]
     },
     "execution_count": 890,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Adding cluster id to the dataframe\n",
    "model_2 = pd.concat([pca_final.reset_index().drop('index',axis=1),pd.Series(model_1.labels_).reset_index().drop('index',axis=1)],axis=1)\n",
    "model_2.columns = ['PCA1','PCA2','PCA3','PCA4','PCA5','country','Cluster_Id'] \n",
    "model_2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 891,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    88\n",
       "0    39\n",
       "1    38\n",
       "Name: Cluster_Id, dtype: int64"
      ]
     },
     "execution_count": 891,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_2.Cluster_Id.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting the clusterid wrt PCA components"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 892,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x201afd70>"
      ]
     },
     "execution_count": 892,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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NxGFN3+PTRurX2+Iqt7QGm+AiIioBpM7csJCAIcAOA1Auaruv7qtqitUdSEAiEhfAHEA7oOdSO0nIucB2AQgJBsQE1FQavHYRERE5CQmd9SqRCQawEgAPwE4AsDSep5+GYA3YCdcA0Qkufo1OgC4G8CUwEZLRJHCH2NTtd4islxEvhaRYQELmIiIqA5M7qi1xIrICgBLAPwG4JVGfM2lAGarahWAdwFcVH18CoCnVLUoIJESUSTx59i0C0Caqh4F4DYAr4tIxwDETEREVKdopwOgiLFPVYd4HhCRNQAurOvJInIkgH4A5tn2F7SBLcN8AcBxAC4UkUcBJACoEpESVX0+gPETUXjy29ikqqUASgFAVZeKyEYA/WGJIxERUcCJqjodA0UAESlS1bhaxwTAIgDTVXVa9bGhANoDGAGgQFUf8nj+ZgCnqupWj2P3AyhS1ccD/y6IKNz4c2wCUAxgj6pWikgf2LLNQaq6p1XeDBERRTwuyyTHqF1ZGAfgzOpy42sA3A9gJ2zZ03u1vuS96uNERAHTgrHpZACrRGQlgP8AuIGJHRERtSbO3BEREREREYUBztwRERERERGFASZ3REREREREYYDJHRERERERURhgckdERERERBQGmNwRERERERGFASZ3REREREREYYDJHRERERERURhgckdERERERBQG/h8vr1UhJ0FBTwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1080x1080 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(15,15))\n",
    "plt.subplot(3,3,1)\n",
    "sns.scatterplot(x='PCA1',y='PCA2',data=model_2,hue='Cluster_Id',palette= ['red','yellow','blue'])\n",
    "plt.subplot(3,3,2)\n",
    "sns.scatterplot(x='PCA2',y='PCA3',data=model_2,hue='Cluster_Id',palette= ['red','yellow','blue'])\n",
    "plt.subplot(3,3,3)\n",
    "sns.scatterplot(x='PCA3',y='PCA4',data=model_2,hue='Cluster_Id',palette= ['red','yellow','blue'])\n",
    "plt.subplot(3,3,4)\n",
    "sns.scatterplot(x='PCA4',y='PCA5',data=model_2,hue='Cluster_Id',palette= ['red','yellow','blue'])\n",
    "plt.subplot(3,3,5)\n",
    "sns.scatterplot(x='PCA5',y='PCA1',data=model_2,hue='Cluster_Id',palette= ['red','yellow','blue'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cluster Profiling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 893,
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_data = pd.merge(df_country,model_2,how='inner',on='country') # merging main dataframe with the last clusterd datframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 894,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>child_mort</th>\n",
       "      <th>exports</th>\n",
       "      <th>health</th>\n",
       "      <th>imports</th>\n",
       "      <th>income</th>\n",
       "      <th>inflation</th>\n",
       "      <th>life_expec</th>\n",
       "      <th>total_fer</th>\n",
       "      <th>gdpp</th>\n",
       "      <th>PCA1</th>\n",
       "      <th>PCA2</th>\n",
       "      <th>PCA3</th>\n",
       "      <th>PCA4</th>\n",
       "      <th>PCA5</th>\n",
       "      <th>Cluster_Id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>90.2</td>\n",
       "      <td>1.808318</td>\n",
       "      <td>1.370705</td>\n",
       "      <td>8.119349</td>\n",
       "      <td>1610</td>\n",
       "      <td>9.44</td>\n",
       "      <td>56.2</td>\n",
       "      <td>5.82</td>\n",
       "      <td>553</td>\n",
       "      <td>-3.444145</td>\n",
       "      <td>0.389904</td>\n",
       "      <td>0.317508</td>\n",
       "      <td>-0.500182</td>\n",
       "      <td>-1.026673</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Albania</td>\n",
       "      <td>16.6</td>\n",
       "      <td>0.684597</td>\n",
       "      <td>0.160147</td>\n",
       "      <td>1.188264</td>\n",
       "      <td>9930</td>\n",
       "      <td>4.49</td>\n",
       "      <td>76.3</td>\n",
       "      <td>1.65</td>\n",
       "      <td>4090</td>\n",
       "      <td>0.908371</td>\n",
       "      <td>-0.517803</td>\n",
       "      <td>-0.963546</td>\n",
       "      <td>0.425396</td>\n",
       "      <td>-0.127454</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>27.3</td>\n",
       "      <td>0.860987</td>\n",
       "      <td>0.093498</td>\n",
       "      <td>0.704036</td>\n",
       "      <td>12900</td>\n",
       "      <td>16.10</td>\n",
       "      <td>76.5</td>\n",
       "      <td>2.89</td>\n",
       "      <td>4460</td>\n",
       "      <td>0.483992</td>\n",
       "      <td>-1.030763</td>\n",
       "      <td>0.180813</td>\n",
       "      <td>0.591295</td>\n",
       "      <td>0.061194</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Angola</td>\n",
       "      <td>119.0</td>\n",
       "      <td>1.764873</td>\n",
       "      <td>0.080737</td>\n",
       "      <td>1.215297</td>\n",
       "      <td>5900</td>\n",
       "      <td>22.40</td>\n",
       "      <td>60.1</td>\n",
       "      <td>6.16</td>\n",
       "      <td>3530</td>\n",
       "      <td>-2.314707</td>\n",
       "      <td>-1.544240</td>\n",
       "      <td>1.672481</td>\n",
       "      <td>-1.312589</td>\n",
       "      <td>0.257160</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>10.3</td>\n",
       "      <td>0.372951</td>\n",
       "      <td>0.049426</td>\n",
       "      <td>0.482787</td>\n",
       "      <td>19100</td>\n",
       "      <td>1.44</td>\n",
       "      <td>76.8</td>\n",
       "      <td>2.13</td>\n",
       "      <td>12200</td>\n",
       "      <td>1.376855</td>\n",
       "      <td>-0.166154</td>\n",
       "      <td>-0.698462</td>\n",
       "      <td>0.012918</td>\n",
       "      <td>-0.070727</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               country  child_mort   exports    health   imports  income  \\\n",
       "0          Afghanistan        90.2  1.808318  1.370705  8.119349    1610   \n",
       "1              Albania        16.6  0.684597  0.160147  1.188264    9930   \n",
       "2              Algeria        27.3  0.860987  0.093498  0.704036   12900   \n",
       "3               Angola       119.0  1.764873  0.080737  1.215297    5900   \n",
       "4  Antigua and Barbuda        10.3  0.372951  0.049426  0.482787   19100   \n",
       "\n",
       "   inflation  life_expec  total_fer   gdpp      PCA1      PCA2      PCA3  \\\n",
       "0       9.44        56.2       5.82    553 -3.444145  0.389904  0.317508   \n",
       "1       4.49        76.3       1.65   4090  0.908371 -0.517803 -0.963546   \n",
       "2      16.10        76.5       2.89   4460  0.483992 -1.030763  0.180813   \n",
       "3      22.40        60.1       6.16   3530 -2.314707 -1.544240  1.672481   \n",
       "4       1.44        76.8       2.13  12200  1.376855 -0.166154 -0.698462   \n",
       "\n",
       "       PCA4      PCA5  Cluster_Id  \n",
       "0 -0.500182 -1.026673           0  \n",
       "1  0.425396 -0.127454           2  \n",
       "2  0.591295  0.061194           2  \n",
       "3 -1.312589  0.257160           0  \n",
       "4  0.012918 -0.070727           2  "
      ]
     },
     "execution_count": 894,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_data.head() # Looking at merged data's head"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 895,
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_data = merged_data.drop(['PCA1','PCA2','PCA3','PCA4','PCA5'],axis=1) # dropping PCA columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 896,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>child_mort</th>\n",
       "      <th>exports</th>\n",
       "      <th>health</th>\n",
       "      <th>imports</th>\n",
       "      <th>income</th>\n",
       "      <th>inflation</th>\n",
       "      <th>life_expec</th>\n",
       "      <th>total_fer</th>\n",
       "      <th>gdpp</th>\n",
       "      <th>Cluster_Id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>90.2</td>\n",
       "      <td>1.808318</td>\n",
       "      <td>1.370705</td>\n",
       "      <td>8.119349</td>\n",
       "      <td>1610</td>\n",
       "      <td>9.44</td>\n",
       "      <td>56.2</td>\n",
       "      <td>5.82</td>\n",
       "      <td>553</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Albania</td>\n",
       "      <td>16.6</td>\n",
       "      <td>0.684597</td>\n",
       "      <td>0.160147</td>\n",
       "      <td>1.188264</td>\n",
       "      <td>9930</td>\n",
       "      <td>4.49</td>\n",
       "      <td>76.3</td>\n",
       "      <td>1.65</td>\n",
       "      <td>4090</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>27.3</td>\n",
       "      <td>0.860987</td>\n",
       "      <td>0.093498</td>\n",
       "      <td>0.704036</td>\n",
       "      <td>12900</td>\n",
       "      <td>16.10</td>\n",
       "      <td>76.5</td>\n",
       "      <td>2.89</td>\n",
       "      <td>4460</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Angola</td>\n",
       "      <td>119.0</td>\n",
       "      <td>1.764873</td>\n",
       "      <td>0.080737</td>\n",
       "      <td>1.215297</td>\n",
       "      <td>5900</td>\n",
       "      <td>22.40</td>\n",
       "      <td>60.1</td>\n",
       "      <td>6.16</td>\n",
       "      <td>3530</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>10.3</td>\n",
       "      <td>0.372951</td>\n",
       "      <td>0.049426</td>\n",
       "      <td>0.482787</td>\n",
       "      <td>19100</td>\n",
       "      <td>1.44</td>\n",
       "      <td>76.8</td>\n",
       "      <td>2.13</td>\n",
       "      <td>12200</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               country  child_mort   exports    health   imports  income  \\\n",
       "0          Afghanistan        90.2  1.808318  1.370705  8.119349    1610   \n",
       "1              Albania        16.6  0.684597  0.160147  1.188264    9930   \n",
       "2              Algeria        27.3  0.860987  0.093498  0.704036   12900   \n",
       "3               Angola       119.0  1.764873  0.080737  1.215297    5900   \n",
       "4  Antigua and Barbuda        10.3  0.372951  0.049426  0.482787   19100   \n",
       "\n",
       "   inflation  life_expec  total_fer   gdpp  Cluster_Id  \n",
       "0       9.44        56.2       5.82    553           0  \n",
       "1       4.49        76.3       1.65   4090           2  \n",
       "2      16.10        76.5       2.89   4460           2  \n",
       "3      22.40        60.1       6.16   3530           0  \n",
       "4       1.44        76.8       2.13  12200           2  "
      ]
     },
     "execution_count": 896,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_data.head() # looking at data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 897,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_data = merged_data[['child_mort','income','gdpp','country','Cluster_Id']] # Creating new dtaframe with required column"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Let's profile the cluster by taking the mean of various attributes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 898,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Taking mean of each columns wrt Cluster id \n",
    "clu_chil_mort = pd.DataFrame(df_data.groupby([\"Cluster_Id\"]).child_mort.mean())\n",
    "clu_income= pd.DataFrame(df_data.groupby([\"Cluster_Id\"]).income.mean())\n",
    "clu_gdpp = pd.DataFrame(df_data.groupby([\"Cluster_Id\"]).gdpp.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 899,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.concat([clu_chil_mort,clu_income,clu_gdpp], axis=1)  #Concating the calculted mean colummns and creating a new dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 900,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>child_mort</th>\n",
       "      <th>income</th>\n",
       "      <th>gdpp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>93.297436</td>\n",
       "      <td>2026.641026</td>\n",
       "      <td>894.487179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.636842</td>\n",
       "      <td>45594.736842</td>\n",
       "      <td>41573.684211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>26.303409</td>\n",
       "      <td>11881.931818</td>\n",
       "      <td>6224.636364</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   child_mort        income          gdpp\n",
       "0   93.297436   2026.641026    894.487179\n",
       "1    5.636842  45594.736842  41573.684211\n",
       "2   26.303409  11881.931818   6224.636364"
      ]
     },
     "execution_count": 900,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.reset_index(drop=True)  # Reseting index \n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plotting the columns wrt cluster id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 901,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(15,15))\n",
    "plt.subplot(3,3,1)\n",
    "sns.boxplot(y='child_mort',x='Cluster_Id',data=merged_data)\n",
    "plt.subplot(3,3,2)\n",
    "sns.boxplot(y='income',x='Cluster_Id',data=merged_data)\n",
    "plt.subplot(3,3,3)\n",
    "sns.boxplot(y='gdpp',x='Cluster_Id',data=merged_data)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "As by looking at the above box plot we can say that the Cluster id 0 has very high value of child_mort , very low income and by default the gdpp is also low \n",
    "\n",
    "So country in cluster_id = 0 need's to be taken care off"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 902,
   "metadata": {},
   "outputs": [],
   "source": [
    "custer_0 = df_data.loc[(df_data['Cluster_Id'] == 0)] # Separting data with cluster id 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 903,
   "metadata": {},
   "outputs": [],
   "source": [
    "custer_0 = custer_0.sort_values(by=['child_mort','income','gdpp'],ascending=False) # Sorting data in descending form to look at the top countries with high child_mort,low income and low gdpp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Recommendation : <b> <U> Here are the top 5 countries according to the clustering done. This countries should be provided with help "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 904,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Haiti</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Sierra Leone</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Chad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Central African Republic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Mali</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    country\n",
       "0                     Haiti\n",
       "1              Sierra Leone\n",
       "2                      Chad\n",
       "3  Central African Republic\n",
       "4                      Mali"
      ]
     },
     "execution_count": 904,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "countries = pd.DataFrame(custer_0['country'].head())\n",
    "countries.reset_index(drop =True,inplace = True)\n",
    "countries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### List of Countries : Haiti,Sierra Leone,Chad,Central African Republic,Mali"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## HIERARCHY CLUSTERING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 905,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.cluster.hierarchy import linkage\n",
    "from scipy.cluster.hierarchy import dendrogram\n",
    "from scipy.cluster.hierarchy import cut_tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 906,
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_data1 = df_data.drop('country',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 907,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# single linkage\n",
    "fig = plt.figure(figsize=(10,7))\n",
    "mergings = linkage(merged_data1, method=\"single\", metric='euclidean')\n",
    "dendrogram(mergings)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 908,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# complete linkage\n",
    "fig = plt.figure(figsize=(10,7))\n",
    "mergings = linkage(merged_data1, method=\"complete\", metric='euclidean')\n",
    "dendrogram(mergings)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 909,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n",
       "       0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,\n",
       "       0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n",
       "       1, 0, 2, 1, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,\n",
       "       0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0])"
      ]
     },
     "execution_count": 909,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 3 clusters\n",
    "cluster_labels = cut_tree(mergings, n_clusters=3).reshape(-1, )\n",
    "cluster_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 910,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>child_mort</th>\n",
       "      <th>income</th>\n",
       "      <th>gdpp</th>\n",
       "      <th>Cluster_Id</th>\n",
       "      <th>cluster_labels</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90.2</td>\n",
       "      <td>1610</td>\n",
       "      <td>553</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16.6</td>\n",
       "      <td>9930</td>\n",
       "      <td>4090</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>27.3</td>\n",
       "      <td>12900</td>\n",
       "      <td>4460</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>119.0</td>\n",
       "      <td>5900</td>\n",
       "      <td>3530</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10.3</td>\n",
       "      <td>19100</td>\n",
       "      <td>12200</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   child_mort  income   gdpp  Cluster_Id  cluster_labels\n",
       "0        90.2    1610    553           0               0\n",
       "1        16.6    9930   4090           2               0\n",
       "2        27.3   12900   4460           2               0\n",
       "3       119.0    5900   3530           0               0\n",
       "4        10.3   19100  12200           2               0"
      ]
     },
     "execution_count": 910,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# assign cluster labels\n",
    "merged_data1['cluster_labels'] = cluster_labels\n",
    "merged_data1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 911,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2], dtype=int64)"
      ]
     },
     "execution_count": 911,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_data1.cluster_labels.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 912,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x239c9a90>"
      ]
     },
     "execution_count": 912,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plots\n",
    "\n",
    "sns.boxplot(x='cluster_labels', y='income', data=merged_data1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 913,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x23b29a90>"
      ]
     },
     "execution_count": 913,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plots\n",
    "sns.boxplot(x='cluster_labels', y='child_mort', data=merged_data1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 914,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x23ca1790>"
      ]
     },
     "execution_count": 914,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plots\n",
    "sns.boxplot(x='cluster_labels', y='gdpp', data=merged_data1)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
